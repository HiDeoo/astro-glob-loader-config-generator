---
import { Code } from 'astro-expressive-code/components'

const code = `import { glob } from 'astro/loaders';
import { defineCollection } from 'astro:content';

const items = defineCollection({
  loader: glob({
    pattern: "**/*.md",
    base: "src/data/items",
  }),
});

export const collections = { items };`

// TODO(HiDeoo) loop for extensions

// TODO(HiDeoo) filetree preview
---

<astro-glob-loader-config-generator>
  <div>
    <form>
      <fieldset>
        <legend>USING?</legend>
        <input type="checkbox" id="md" name="md" checked />
        <label for="md">Markdown</label>
        <input type="checkbox" id="mdx" name="mdx" />
        <label for="mdx">MDX</label>
      </fieldset>
      <div>
        <label for="base">Where are your items located?</label>
        <input type="text" id="base" name="base" value="src/data/items" required pattern="[^\\\\\\/][^\\\\]+" />
      </div>
      <div>
        <label for="collectionName">What's the collection name?</label>
        <input
          type="text"
          id="collectionName"
          name="collectionName"
          value="items"
          required
          pattern="[a-zA-Z_$][\\w_$]*"
        />
      </div>
      <div>
        <input type="checkbox" id="excludeLeadingUnderscore" name="excludeLeadingUnderscore" />
        <label for="excludeLeadingUnderscore">Exclude files starting with an underscore</label>
      </div>
    </form>
    <Code {code} lang="ts" title="src/content.config.ts" />
  </div>
</astro-glob-loader-config-generator>

<style>
  astro-glob-loader-config-generator > div {
    background-color: var(--color-zinc-800);
    border: var(--size-px) solid var(--color-zinc-600);
    padding: var(--size-4);
  }

  input[type='text']:invalid {
    border: 4px solid red;
  }
</style>

<script>
  customElements.define(
    'astro-glob-loader-config-generator',
    class AstroGlobLoaderConfigGenerator extends HTMLElement {
      #extensions = ['md', 'mdx']

      #form: HTMLFormElement | null
      #baseInput: HTMLInputElement | null | undefined
      #nameInput: HTMLInputElement | null | undefined

      #baseElement: HTMLSpanElement | null | undefined
      #patternElement: HTMLSpanElement | null | undefined
      #nameElement: HTMLSpanElement | null | undefined
      #nameExportElement: HTMLSpanElement | null | undefined

      constructor() {
        super()

        this.#form = this.querySelector('form')
        this.#form?.addEventListener('input', this.#handleInput)
        this.#baseInput = this.#form?.querySelector('input[name="base"]')
        this.#nameInput = this.#form?.querySelector('input[name="collectionName"]')

        const code = this.querySelector('.expressive-code code')
        this.#nameElement = code?.querySelector('.ec-line:nth-child(4) span:nth-child(2)')
        this.#baseElement = code?.querySelector('.ec-line:nth-child(7) span:nth-child(6)')
        this.#patternElement = code?.querySelector('.ec-line:nth-child(6) span:nth-child(6)')
        this.#nameExportElement = code?.querySelector('.ec-line:nth-child(11) span:nth-child(6)')
      }

      #handleInput = () => {
        if (!this.#form) return

        const formData = new FormData(this.#form)

        this.#updatePattern(formData)
        this.#updateBase(formData)
        this.#updateName(formData)
      }

      #updatePattern = (data: FormData) => {
        if (!this.#patternElement) return

        const extensions = this.#extensions.filter((ext) => data.has(ext))
        const excludePattern = data.has('excludeLeadingUnderscore') ? '[^_]' : ''
        const pattern =
          extensions.length === 0
            ? `**/*${excludePattern}`
            : extensions.length === 1
              ? `**/${excludePattern}*.${extensions[0]}`
              : `**/${excludePattern}*.{${extensions.join(',')}}`

        this.#patternElement.textContent = pattern
      }

      #updateBase = (data: FormData) => {
        if (!this.#baseElement) return

        let base = 'src/data/items'

        if (this.#baseInput?.checkValidity()) {
          const value = String(data.get('base'))
          if (value) base = value
        }

        this.#baseElement.textContent = base
      }

      #updateName = (data: FormData) => {
        if (!this.#nameElement || !this.#nameExportElement) return

        let name = 'items'

        if (this.#nameInput?.checkValidity()) {
          const value = String(data.get('collectionName'))
          if (value) name = value
        }

        this.#nameElement.textContent = ` ${name} `
        this.#nameExportElement.textContent = ` { ${name} };`
      }
    },
  )
</script>
